<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.30 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-trammell-privsec-defeating-tcpip-meta-00" category="info">

  <front>
    <title abbrev="Defeating Hypercookies">Detecting and Defeating TCP/IP Hypercookie Attacks</title>

    <author initials="B." surname="Trammell" fullname="Brian Trammell">
      <organization>ETH Zurich</organization>
      <address>
        <email>ietf@trammell.ch</email>
      </address>
    </author>

    <date year="2016" month="July" day="29"/>

    <area>Internet Architecture Board</area>
    <workgroup>Privacy and Security Program</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The TCP/IP stack provides protocol features that can potentially be abused by
on-path attackers to inject metadata about a traffic flow into that traffic
flow in band. When this injected metadata is provided by an entity with
knowledge about the natural person associated with a traffic flow, it becomes
a grave threat to privacy, which we term a hypercookie.</t>

<t>This document defines a threat model for hypercookie injection and hypercookie
coercion attacks, catalogs protocol features that may be used to achieve them,
and provides guidance for defeating these attacks, with an analysis of
protocol features that are disabled by the proposed defeat mechanism.</t>

<t>The deployment of firewalls that detect and reject abuse of protocol features
can help, but the relative ease of injecting metadata for attackers on path,
and trivial combination of metadata injection attacks, leads to a
recommendation to add cryptographic integrity protection to transport layer
headers to defend against injection attacks.</t>

<t>tl;dr: at least with respect to metadata injection in the current Internet
protocol stack, everything is ruined.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This document considers a specific threat model related to the pervasive
surveillance threat model defined in <xref target="RFC7624"/> and correlation and
identification of users as defined in sections 5.2.1 and 5.2.2, respectively,
of <xref target="RFC6973"/>. The attacker has access to the access network(s) connecting a
user to the Internet, by collaborating with, coopting, or otherwise exercising
influence over the user’s access provider. It can see all inbound and outbound
traffic from the user via that network, and can modify inbound and outbound
packets to the user. The attacker would like to add metadata to the user’s
traffic flows in order to expose that metadata to networks the user
communicates with, where it will be passively observed, and it would like this
metadata to appear in layers 3 or 4, in order to be completely transparent to
the application. For purposes of this analysis, we presume this metadata is a
user identifier or partial user identifier.  We propose a colloquial term for
this type of sub-application identification: “hypercookie”. This can be seen
as a third-party implementation of the metadata insertion pattern described in
<xref target="I-D.hardie-privsec-metadata-insertion"/>.</t>

<t>The attacker is variably interested in avoiding detection of hypercookie
injection techniques, and is variably interested in metadata reliability, but
requires that the injected metadata not interfere with normal protocol
operation, even if the exposed metadata is not used by any far endpoint.</t>

<t>The hypercookie injection attack is related to another, largely equivalent
attack, hypercookie coercion. In this attack, the attacker requires the client
endpoint to expose the hypercookie itself, and uses in-band verification
techniques to determine whether the hypercookie was correctly applied,
blocking traffic which does not carry it.</t>

<t>This document is concerned only with identification through hypercookie
injection at the transport and network layers, as this is possible even when
the application layer is encrypted using TLS or other encryption schemes that
operate above the transport layer. Application layer hypercookie injection is
out of scope, as are identification methods using traffic fingerprinting. It
is also concerned only with TCP as defined, not as implemented and deployed;
exploitation of other behaviors in implemented TCP stacks (e.g. as outlined in
<xref target="blind-tcp-attacks"/> may also be used for hypercookie exposure, albeit with
further risk of connection disruption.</t>

<t>Further, out-of-band identification methods, e.g. linking a flow’s five- or
six-tuple with an identifier and using some other protocol to export this
linkage, is also not considered, as it is practically impossible for users and
far endpoints to detect and defeat.</t>

<t>The metadata injection techniques presented in this document are EMPHATICALLY
NOT RECOMMENDED for use on the Internet; this document is intended to educate
members of the Internet engineering community about the potential for abuse in
TCP as defined and deployed.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>As used in this document:</t>

<t><list style="symbols">
  <t>“Stateless TCP firewall” refers to a middlebox <xref target="RFC3234"/> that selectively
drops single malformed TCP packets. A stateless TCP firewall can defeat TCP
metadata injection techniques which rely on noncompliant formation of
single TCP packets.</t>
  <t>“Stateful TCP firewall” refers to a middlebox that selectively drops TCP
packets not conforming to the protocol by modeling the TCP state machine on
both endpoints. A stateful TCP firewall can defeat TCP metadata injection
techniques which relies on noncompliant formation of TCP packets and/or
flows.</t>
  <t>“Split TCP proxy” refers to a middlebox which terminates a TCP connection
on one its Internet-facing side and opens a separate TCP connection on the
other side. Split TCP firewalls defeat most of the TCP-specific metadata
injection techniques in this document.</t>
</list></t>

</section>
<section anchor="general-mitigation-techniques-and-related-work" title="General Mitigation Techniques and Related Work">

<t>The metadata injection techniques described in <xref target="evil"/> share some general
properties: each places data into bits in the IP or TCP header, injection of
which is insignificant to the connectivity or performance of the connection
between the endpoints. To some extent, this is a consequence of cleartext
headers in IP and TCP and of Postel’s maxim <xref target="RFC1122"/>. Being liberal in what
one accepts leaves space between what the sender SHOULD/MUST send and what the
receiver will silently ignore, and these techniques exploit that space.
Changing transport stacks to fail fast and hard on the receiver side, as
recommended in <xref target="I-D.thomson-postel-was-wrong"/> would reduce this space, but
at the possible risk of connectivity instability during the transition.</t>

<t>TCP HICCUPS <xref target="hiccups"/> proposes a method for cooperative discovery and
mitigation of middlebox manipulation. It uses many of the bits in the header
that could also be used for metadata injection, and as such provides a
concrete implementation of fail fast and hard, mitigating TCP attacks as in
<xref target="evil-tcp"/>.</t>

<t>The deployment of middleboxes to drop malformed packets or zero fields that
may be used in hypercookie attacks may help to reduce the rate of success and
therefore the incentive to perform hypercookie injection. However, this must
be balanced against the cost of additional management complexity and the risk
of further ossification of the Internet protocol stack through even more
widespread deployment of transport-aware, stateful, packet-modifying
middleboxes.</t>

<t>The best defense comes from evolving the stack: Widespread deployment
transport protocol proposals that encrypt most or all of the transport layer
headers such as QUIC, or proposals to enable generalized transport layer
encapsulation and encryption such as PLUS, would effectively mitigate the TCP
attacks in <xref target="evil-tcp"/>.</t>

</section>
<section anchor="evil" title="Metadata Injection Techniques">

<t>This section describes metadata injection techniques against the TCP/IP stack,
separated by whether they abuse the IPv4, IPv6, or TCP protocols.</t>

<section anchor="evil-ip6" title="Abusing Internet Protocol features">

<t>Four attacks abuse the IPv6 header: three by injecting information into IPv6
source addresses, one abusing the IPv6 flow label.</t>

<section anchor="identification-using-eui-64-addressing" title="Identification using EUI-64 addressing">

<t><xref target="RFC4291"/> section 2.5.1 required IPv6 interface identifiers for Stateless
Address Autoconfiguration (SLAAC) to be constructed using modified EUI-64
format. This leaks the hardware address of a user’s terminal to the receiver
and all devices along the path. Such addresses are easily recognized, as well,
given the presence of the bytes 0xff and 0xfe at byte offsets 11 and 12 of the
address. Though <xref target="RFC7136"/> deprecates the significance of the IPv6 interface
identifier and <xref target="RFC4941"/> specifies a standard method for assigning privacy
addresses when using SLAAC, these addresses may still be in use on the
Internet and as such can be passively used as identifying information along the path.</t>

<t>When present, this technique provides 47 bits of identifying information on a
per-node basis, present on each packet from the node. Access network
providers cannot force the use of EUI-64 addressing; however, see 
<xref target="evil-ip6-nat"/> for a related technique.</t>

<t>The mitigation is to disable EUI-64 based SLAAC at end hosts, replacing it
with <xref target="RFC4941"/> privacy addressing and/or DHCPv6 <xref target="RFC3315"/>. This is current
recommended practice in any event. Both of these mitigations come with limited
additional overhead and/or network management complexity.</t>

</section>
<section anchor="identification-using-dhcpv6" title="Identification using DHCPv6">

<t>An attacker which runs or can influence the configuration of a DHCPv6 server
from which a node gets its address can assign a source address to that node,
the interface identifier part of which can contain identifying information.</t>

<t>When successful, this technique provides approximately 64 bits of identifying
information on a per-node basis, present on each packet from the node. Access
network providers can influence the use of DHCPv6 addresses, depending on
access network architecture.</t>

<t>The mitigation is to disable DHCPv6. In situations when a user cannot
practically do so without losing connectivity, this technique can be
identified in some cases through an analysis of the addresses assigned to
node(s) belonging to a user and determination of the persistence of the
linkage between an address or addresses and a user.</t>

</section>
<section anchor="evil-ip6-nat" title="Identification using IPv6 network address translation">

<t>An attacker which cannot influence the configuration of a DHCPv6 server can
use network address translation to rewrite the interface identifier part of an
address to contain identifying information.</t>

<t>When successful, this technique provides approximately 64 bits of identifying
information on a per-node basis, present on each packet from the node.</t>

<t>No user-initiated mitigation is possible with the present stack. This
technique can be detected by connecting to a remote host via IPv6, which can
then analyze the addresses assigned to node(s) belonging to a user and
determination of the persistence of the linkage between an address or
addresses and a user.</t>

</section>
<section anchor="identification-using-flow-id" title="Identification using Flow ID">

<t><xref target="RFC6437"/> defines the IPv6 flow label, a 20-bit field in every IPv6 packet.
It is intended to replace source and destination port in equal-cost
multipath routing (ECMP) and other load distribution schemes. However, the
flow label can be freely rewritten by middleboxes on path.</t>

<t>This technique provides up to 20 bits of identifying information per packet,
with the caveat that applying different flow labels to different packets
within a flow may impair transport layer performance due to reordering.</t>

<t>No user-initiated mitigation is possible with the present stack. Header
modification detection as in <xref target="hiccups"/>, and/or the deployment of middleboxes
that monitor and/or zero the flow label may provide detection and mitigation.</t>

</section>
</section>
<section anchor="evil-ip4" title="Abusing legacy Internet Protocol features">

<t>One attack injects information into the IPv4 fragment ID header.</t>

<section anchor="fragment-identification-rewriting" title="Fragment Identification Rewriting">

<t><xref target="RFC6864"/> defines the Identification field in the IPv4 header, which is used
for fragmentation and fragment reassembly. While the field is only defined
when a packet is fragmented, middleboxes can freely fill identifying
information into this field. <xref target="RFC6864"/> section 4.1 states that the value
MUST be ignored by middleboxes, so it will tend to be preserved along the
path assuming compliant devices.</t>

<t>This technique provides up to 16 bits of identifying information per packet,
with a caveat that it may be difficult to implement on networks with large
amounts of fragmented IPv4 traffic.</t>

<t>There is no user-initiated mitigation possible with deployed IPv4 stacks.
Header modification detection as in <xref target="hiccups"/> may provide detection and
mitigation</t>

</section>
</section>
<section anchor="evil-tcp" title="Abusing Transmission Control Protocol Features">

<t>A multitude of techniques exist to abuse TCP. These can be roughly classified
into per-packet injection, where metadata can be added to header bits in each
packet; and per-flow injection, where packets not part of the normal flow are
generated and ignored by the receiver. Per-flow injection techniques generally
provide much more space for metadata injection, and are sufficient for user
identification for access control and user tracking on a per-flow basis.</t>

<section anchor="initial-sequence-number-rewriting" title="Initial Sequence Number Rewriting">

<t>A middlebox can rewrite the initial sequence number (ISN) of flows it sees the
SYN packet for, in order to place identifying information therein.</t>

<t>This technique provides up to 32 bits of identifying information per flow,
with the caveat that it requires a stateful middlebox to translate all
sequence and acknowledgment numbers on subsequent packets on the flow. It also
does not work if there are other proxies which rewrite the ISN (e.g. for
security, to mitigate poor randomness in 1990s era TCP stace ISN selection
algorithms) on the path between the middlebox and the Internet. The
identification provided by this technique also does not traverse split-TCP proxies.</t>

<t>Header modification detection as in <xref target="hiccups"/> or the aggressive deployment
of split-TCP proxies can mitigate this attack. We note that the aggressive
deployment of split-TCP proxies in the Internet is an undesirable solution, as
it implies an acceleration and deepening of middlebox-related transport
protocol ossification.</t>

</section>
<section anchor="urgent-pointer-identification" title="Urgent Pointer Identification">

<t>A middlebox can rewrite the urgent pointer of TCP packets without the URG flag
set, in order to place identifying information therein. The urgent pointer is
only intepreted when the URG flag is set, according to section 3.1 of
<xref target="RFC0791"/>; compliant implementations will therefore ignore the urgent
pointer when used in this manner.</t>

<t>This technique provides up to 16 bits of identifying information per packet.</t>

<t>Information exposed using this technique may not traverse TCP firewalls or
split TCP proxies. The aggressive deployment of stateless TCP firewalls that
zero the urgent pointer on all packets with the URG flag not set can mitigate
this attack, at the cost of increased operational complexity and further
middlebox-related transport protocol ossification.</t>

</section>
<section anchor="evil-tcp-exid" title="Piggybacked Experimental TCP Options">

<t>A middlebox can piggyback an experimental TCP option onto a TCP packet with
enough headroom, and place identifying information in that option. This option
could even be given a IANA identifier using the ExId mechanism <xref target="RFC6994"/>,
registered with IANA on a First-Come, First-Served <xref target="RFC5226"/> basis, with an
innocuous name, in order to deflect suspicion about its use.</t>

<t>Assuming a 4-byte ExId, sufficient headroom between the segment size and the
path MTU, and no other TCP options on a packet, this technique can provide up
to 288 bits of identifying information per packet given limitations on TCP
options size. We note that this is an upper bound, and that the transparency
of Internet paths to unknown and experimental TCP options is not perfect,
which reduce the applicability of this technique somewhat.</t>

<t>Information exposed using this technique may not traverse TCP firewalls or
split TCP proxies. The aggressive deployment of stateless TCP firewalls that
strip experimental options not in use on a given network can mitigate this
attack. We note that some deployed TCP Fast Open <xref target="RFC7413"/> implementations
use an experimental option, and would be affected by this mitigation. This
mitigation also incurs the cost of increased operational complexity and
further middlebox-related transport ossification.</t>

</section>
<section anchor="bare-ack-segments-with-experimental-tcp-options" title="Bare ACK Segments with Experimental TCP Options">

<t>As with the attack in <xref target="evil-tcp-exid"/>, above, a middlebox could simply
generate a suitable bare ACK packet within a flow, but not initiated by the
sender, and place information in an experimental TCP option. The bare ACK
would be processed by the receiver and the option ignored.</t>

<t>This technique can provide up to 288 bits of identifying information per flow
given limitations on TCP options size. Note that multiple bare ACKs can be
used to extend the amount of information injected per flow.</t>

<t>Mitigations and caveats thereon are as in <xref target="evil-tcp-exid"/>, above.</t>

</section>
<section anchor="evil-tcp-oow" title="Out of Window Segments">

<t>A middlebox that keeps state for each TCP connection traversing it can place
out-of-window segments sharing a given 5-tuple but not initiated by the sender
on the wire. These segments should traverse any device not looking at TCP
state, and be ignored by the receiver.</t>

<t>This technique can provide over 11000 bits of identifying information per flow
given a 1500 byte MTU. Note that multiple out of window segments can be used
to extend the amount of information injected per flow.</t>

<t>Information exposed using this technique may not traverse stateful TCP
firewalls or split TCP proxies. Existing stateful TCP firewalls already
provide out-of-window segment dropping, due to their usefulness in TCP session
hijacking attacks (see <xref target="blind-tcp-attacks"/> for more). The aggressive
deployment of stateful TCP firewalls that drop and warn on out- of-window
segments can mitigate this attack.  This mitigation incurs the cost of
increased operational complexity and further middlebox-related transport
ossification.</t>

</section>
<section anchor="bad-checksum-segments" title="Bad Checksum Segments">

<t>Similar to <xref target="evil-tcp-oow"/>, a middlebox can place segments with bad checksums
sharing a given 5-tuple on the wire. These segments should traverse any device
not looking at TCP state, and be ignored by the receiver.</t>

<t>Per-flow information and mitigations along with caveats are as in <xref target="evil-tcp-oow"/>.</t>

</section>
</section>
<section anchor="evil-combinatorics" title="Combination of Techniques">

<t>Note that multiple techniques above may be combined on any given packet or
over the sequence of packets in any given flow in order to increase the number
of bits available and/or increase the resilience of the injected information
to mitigation.</t>

</section>
</section>
<section anchor="recommendations-and-outlook" title="Recommendations and Outlook">

<t>An analysis of the hypercookie attacks listed in this document, and the
ability to combine them freely to improve hypercookie resilience and capacity,
leads to a relatively bleak outlook. Mitigating the threat at scale with the
stack as presently deployed requires impractically aggressive, altruistic
deployment of TCP-modifying firewalls.</t>

<t>We therefore conclude that the most practical mitigation of this threat is the
development and deployment of transport protocols that provide cryptographic
integrity protection and/or confidentiality for their headers, in order to
prevent hypercookie injection at the transport layer.</t>

<t>Note that these mitigations can only detect, but not prevent, hypercookie
coercion attacks: if an attacker can successfully block a client’s access to
the Internet to enforce hypercookie coercion, removal of metadata will not
restore that access, as the attack is carried out through nontechnical
relationships between the attacker and the target. We can only hope that
raising awareness and bringing transparency to the potential for hypercookie
coercion attacks makes them less likely to be successful.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has no actions for IANA [EDITOR’S NOTE: please remove this
section at publication.]</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document outlines vulnerabilities in the TCP/IP protocol stack as
deployed to a type of attack described in <xref target="introduction"/>. Exploitation of
these vulnerabilities can be used to expose identifying information about
users of a network to third parties; the document discusses general and specific techniques to mitigate the impact of these exploits.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This work is supported by the European Commission under Horizon 2020 grant
agreement no. 688421 Measurement and Architecture for a Middleboxed Internet
(MAMI), and by the Swiss State Secretariat for Education, Research, and
Innovation under contract no. 15.0268. This support does not imply
endorsement.</t>

<t>Thanks to Ted Hardie, Joe Hildebrand, Mirja Kuehlewind, and the participants
at the PLUS BoF at IETF 96 in Berlin for the conversations leading to and
informing the publication of this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor='RFC3234' target='http://www.rfc-editor.org/info/rfc3234'>
<front>
<title>Middleboxes: Taxonomy and Issues</title>
<author initials='B.' surname='Carpenter' fullname='B. Carpenter'><organization /></author>
<author initials='S.' surname='Brim' fullname='S. Brim'><organization /></author>
<date year='2002' month='February' />
<abstract><t>This document is intended as part of an IETF discussion about &quot;middleboxes&quot; - defined as any intermediary box performing functions apart from normal, standard functions of an IP router on the data path between a source host and destination host.  This document establishes a catalogue or taxonomy of middleboxes, cites previous and current IETF work concerning middleboxes, and attempts to identify some preliminary conclusions.  It does not, however, claim to be definitive.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='3234'/>
<seriesInfo name='DOI' value='10.17487/RFC3234'/>
</reference>



<reference  anchor='RFC6973' target='http://www.rfc-editor.org/info/rfc6973'>
<front>
<title>Privacy Considerations for Internet Protocols</title>
<author initials='A.' surname='Cooper' fullname='A. Cooper'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<author initials='B.' surname='Aboba' fullname='B. Aboba'><organization /></author>
<author initials='J.' surname='Peterson' fullname='J. Peterson'><organization /></author>
<author initials='J.' surname='Morris' fullname='J. Morris'><organization /></author>
<author initials='M.' surname='Hansen' fullname='M. Hansen'><organization /></author>
<author initials='R.' surname='Smith' fullname='R. Smith'><organization /></author>
<date year='2013' month='July' />
<abstract><t>This document offers guidance for developing privacy considerations for inclusion in protocol specifications.  It aims to make designers, implementers, and users of Internet protocols aware of privacy-related design choices.  It suggests that whether any individual RFC warrants a specific privacy considerations section will depend on the document's content.</t></abstract>
</front>
<seriesInfo name='RFC' value='6973'/>
<seriesInfo name='DOI' value='10.17487/RFC6973'/>
</reference>



<reference  anchor='RFC7624' target='http://www.rfc-editor.org/info/rfc7624'>
<front>
<title>Confidentiality in the Face of Pervasive Surveillance: A Threat Model and Problem Statement</title>
<author initials='R.' surname='Barnes' fullname='R. Barnes'><organization /></author>
<author initials='B.' surname='Schneier' fullname='B. Schneier'><organization /></author>
<author initials='C.' surname='Jennings' fullname='C. Jennings'><organization /></author>
<author initials='T.' surname='Hardie' fullname='T. Hardie'><organization /></author>
<author initials='B.' surname='Trammell' fullname='B. Trammell'><organization /></author>
<author initials='C.' surname='Huitema' fullname='C. Huitema'><organization /></author>
<author initials='D.' surname='Borkmann' fullname='D. Borkmann'><organization /></author>
<date year='2015' month='August' />
<abstract><t>Since the initial revelations of pervasive surveillance in 2013, several classes of attacks on Internet communications have been discovered.  In this document, we develop a threat model that describes these attacks on Internet confidentiality.  We assume an attacker that is interested in undetected, indiscriminate eavesdropping.  The threat model is based on published, verified attacks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7624'/>
<seriesInfo name='DOI' value='10.17487/RFC7624'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor='RFC0791' target='http://www.rfc-editor.org/info/rfc791'>
<front>
<title>Internet Protocol</title>
<author initials='J.' surname='Postel' fullname='J. Postel'><organization /></author>
<date year='1981' month='September' />
</front>
<seriesInfo name='STD' value='5'/>
<seriesInfo name='RFC' value='791'/>
<seriesInfo name='DOI' value='10.17487/RFC0791'/>
</reference>



<reference  anchor='RFC1122' target='http://www.rfc-editor.org/info/rfc1122'>
<front>
<title>Requirements for Internet Hosts - Communication Layers</title>
<author initials='R.' surname='Braden' fullname='R. Braden' role='editor'><organization /></author>
<date year='1989' month='October' />
<abstract><t>This RFC is an official specification for the Internet community.  It incorporates by reference, amends, corrects, and supplements the primary protocol standards documents relating to hosts.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='3'/>
<seriesInfo name='RFC' value='1122'/>
<seriesInfo name='DOI' value='10.17487/RFC1122'/>
</reference>



<reference  anchor='RFC3315' target='http://www.rfc-editor.org/info/rfc3315'>
<front>
<title>Dynamic Host Configuration Protocol for IPv6 (DHCPv6)</title>
<author initials='R.' surname='Droms' fullname='R. Droms' role='editor'><organization /></author>
<author initials='J.' surname='Bound' fullname='J. Bound'><organization /></author>
<author initials='B.' surname='Volz' fullname='B. Volz'><organization /></author>
<author initials='T.' surname='Lemon' fullname='T. Lemon'><organization /></author>
<author initials='C.' surname='Perkins' fullname='C. Perkins'><organization /></author>
<author initials='M.' surname='Carney' fullname='M. Carney'><organization /></author>
<date year='2003' month='July' />
</front>
<seriesInfo name='RFC' value='3315'/>
<seriesInfo name='DOI' value='10.17487/RFC3315'/>
</reference>



<reference  anchor='RFC4291' target='http://www.rfc-editor.org/info/rfc4291'>
<front>
<title>IP Version 6 Addressing Architecture</title>
<author initials='R.' surname='Hinden' fullname='R. Hinden'><organization /></author>
<author initials='S.' surname='Deering' fullname='S. Deering'><organization /></author>
<date year='2006' month='February' />
<abstract><t>This specification defines the addressing architecture of the IP Version 6 (IPv6) protocol.  The document includes the IPv6 addressing model, text representations of IPv6 addresses, definition of IPv6 unicast addresses, anycast addresses, and multicast addresses, and an IPv6 node's required addresses.</t><t>This document obsoletes RFC 3513, &quot;IP Version 6 Addressing Architecture&quot;.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4291'/>
<seriesInfo name='DOI' value='10.17487/RFC4291'/>
</reference>



<reference  anchor='RFC4941' target='http://www.rfc-editor.org/info/rfc4941'>
<front>
<title>Privacy Extensions for Stateless Address Autoconfiguration in IPv6</title>
<author initials='T.' surname='Narten' fullname='T. Narten'><organization /></author>
<author initials='R.' surname='Draves' fullname='R. Draves'><organization /></author>
<author initials='S.' surname='Krishnan' fullname='S. Krishnan'><organization /></author>
<date year='2007' month='September' />
<abstract><t>Nodes use IPv6 stateless address autoconfiguration to generate addresses using a combination of locally available information and information advertised by routers.  Addresses are formed by combining network prefixes with an interface identifier.  On an interface that contains an embedded IEEE Identifier, the interface identifier is typically derived from it.  On other interface types, the interface identifier is generated through other means, for example, via random number generation.  This document describes an extension to IPv6 stateless address autoconfiguration for interfaces whose interface identifier is derived from an IEEE identifier.  Use of the extension causes nodes to generate global scope addresses from interface identifiers that change over time, even in cases where the interface contains an embedded IEEE identifier.  Changing the interface identifier (and the global scope addresses generated from it) over time makes it more difficult for eavesdroppers and other information collectors to identify when different addresses used in different transactions actually correspond to the same node.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4941'/>
<seriesInfo name='DOI' value='10.17487/RFC4941'/>
</reference>



<reference  anchor='RFC5226' target='http://www.rfc-editor.org/info/rfc5226'>
<front>
<title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
<author initials='T.' surname='Narten' fullname='T. Narten'><organization /></author>
<author initials='H.' surname='Alvestrand' fullname='H. Alvestrand'><organization /></author>
<date year='2008' month='May' />
<abstract><t>Many protocols make use of identifiers consisting of constants and other well-known values.  Even after a protocol has been defined and deployment has begun, new values may need to be assigned (e.g., for a new option type in DHCP, or a new encryption or authentication transform for IPsec).  To ensure that such quantities have consistent values and interpretations across all implementations, their assignment must be administered by a central authority.  For IETF protocols, that role is provided by the Internet Assigned Numbers Authority (IANA).</t><t>In order for IANA to manage a given namespace prudently, it needs guidelines describing the conditions under which new values can be assigned or when modifications to existing values can be made.  If IANA is expected to play a role in the management of a namespace, IANA must be given clear and concise instructions describing that role.  This document discusses issues that should be considered in formulating a policy for assigning values to a namespace and provides guidelines for authors on the specific text that must be included in documents that place demands on IANA.</t><t>This document obsoletes RFC 2434.  This document specifies an Internet Best  Current Practices for the Internet Community, and requests discussion and  suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='26'/>
<seriesInfo name='RFC' value='5226'/>
<seriesInfo name='DOI' value='10.17487/RFC5226'/>
</reference>



<reference  anchor='RFC6093' target='http://www.rfc-editor.org/info/rfc6093'>
<front>
<title>On the Implementation of the TCP Urgent Mechanism</title>
<author initials='F.' surname='Gont' fullname='F. Gont'><organization /></author>
<author initials='A.' surname='Yourtchenko' fullname='A. Yourtchenko'><organization /></author>
<date year='2011' month='January' />
<abstract><t>This document analyzes how current TCP implementations process TCP urgent indications and how the behavior of some widely deployed middleboxes affects how end systems process urgent indications. This document updates the relevant specifications such that they accommodate current practice in processing TCP urgent indications, raises awareness about the reliability of TCP urgent indications in the Internet, and recommends against the use of urgent indications (but provides advice to applications that do).   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6093'/>
<seriesInfo name='DOI' value='10.17487/RFC6093'/>
</reference>



<reference  anchor='RFC6437' target='http://www.rfc-editor.org/info/rfc6437'>
<front>
<title>IPv6 Flow Label Specification</title>
<author initials='S.' surname='Amante' fullname='S. Amante'><organization /></author>
<author initials='B.' surname='Carpenter' fullname='B. Carpenter'><organization /></author>
<author initials='S.' surname='Jiang' fullname='S. Jiang'><organization /></author>
<author initials='J.' surname='Rajahalme' fullname='J. Rajahalme'><organization /></author>
<date year='2011' month='November' />
<abstract><t>This document specifies the IPv6 Flow Label field and the minimum requirements for IPv6 nodes labeling flows, IPv6 nodes forwarding labeled packets, and flow state establishment methods.  Even when mentioned as examples of possible uses of the flow labeling, more detailed requirements for specific use cases are out of the scope for this document.</t><t>The usage of the Flow Label field enables efficient IPv6 flow classification based only on IPv6 main header fields in fixed positions.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6437'/>
<seriesInfo name='DOI' value='10.17487/RFC6437'/>
</reference>



<reference  anchor='RFC6864' target='http://www.rfc-editor.org/info/rfc6864'>
<front>
<title>Updated Specification of the IPv4 ID Field</title>
<author initials='J.' surname='Touch' fullname='J. Touch'><organization /></author>
<date year='2013' month='February' />
<abstract><t>The IPv4 Identification (ID) field enables fragmentation and reassembly and, as currently specified, is required to be unique within the maximum lifetime for all datagrams with a given source address/destination address/protocol tuple.  If enforced, this uniqueness requirement would limit all connections to 6.4 Mbps for typical datagram sizes.  Because individual connections commonly exceed this speed, it is clear that existing systems violate the current specification.  This document updates the specification of the IPv4 ID field in RFCs 791, 1122, and 2003 to more closely reflect current practice and to more closely match IPv6 so that the field's value is defined only when a datagram is actually fragmented.  It also discusses the impact of these changes on how datagrams are used.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6864'/>
<seriesInfo name='DOI' value='10.17487/RFC6864'/>
</reference>



<reference  anchor='RFC6994' target='http://www.rfc-editor.org/info/rfc6994'>
<front>
<title>Shared Use of Experimental TCP Options</title>
<author initials='J.' surname='Touch' fullname='J. Touch'><organization /></author>
<date year='2013' month='August' />
<abstract><t>This document describes how the experimental TCP option codepoints can concurrently support multiple TCP extensions, even within the same connection, using a new IANA TCP experiment identifier. This approach is robust to experiments that are not registered and to those that do not use this sharing mechanism.  It is recommended for all new TCP options that use these codepoints.</t></abstract>
</front>
<seriesInfo name='RFC' value='6994'/>
<seriesInfo name='DOI' value='10.17487/RFC6994'/>
</reference>



<reference  anchor='RFC7413' target='http://www.rfc-editor.org/info/rfc7413'>
<front>
<title>TCP Fast Open</title>
<author initials='Y.' surname='Cheng' fullname='Y. Cheng'><organization /></author>
<author initials='J.' surname='Chu' fullname='J. Chu'><organization /></author>
<author initials='S.' surname='Radhakrishnan' fullname='S. Radhakrishnan'><organization /></author>
<author initials='A.' surname='Jain' fullname='A. Jain'><organization /></author>
<date year='2014' month='December' />
<abstract><t>This document describes an experimental TCP mechanism called TCP Fast Open (TFO).  TFO allows data to be carried in the SYN and SYN-ACK packets and consumed by the receiving end during the initial connection handshake, and saves up to one full round-trip time (RTT) compared to the standard TCP, which requires a three-way handshake (3WHS) to complete before data can be exchanged.  However, TFO deviates from the standard TCP semantics, since the data in the SYN could be replayed to an application in some rare circumstances.  Applications should not use TFO unless they can tolerate this issue, as detailed in the Applicability section.</t></abstract>
</front>
<seriesInfo name='RFC' value='7413'/>
<seriesInfo name='DOI' value='10.17487/RFC7413'/>
</reference>



<reference  anchor='RFC7136' target='http://www.rfc-editor.org/info/rfc7136'>
<front>
<title>Significance of IPv6 Interface Identifiers</title>
<author initials='B.' surname='Carpenter' fullname='B. Carpenter'><organization /></author>
<author initials='S.' surname='Jiang' fullname='S. Jiang'><organization /></author>
<date year='2014' month='February' />
<abstract><t>The IPv6 addressing architecture includes a unicast interface identifier that is used in the creation of many IPv6 addresses. Interface identifiers are formed by a variety of methods.  This document clarifies that the bits in an interface identifier have no meaning and that the entire identifier should be treated as an opaque value.  In particular, RFC 4291 defines a method by which the Universal and Group bits of an IEEE link-layer address are mapped into an IPv6 unicast interface identifier.  This document clarifies that those two bits are significant only in the process of deriving interface identifiers from an IEEE link-layer address, and it updates RFC 4291 accordingly.</t></abstract>
</front>
<seriesInfo name='RFC' value='7136'/>
<seriesInfo name='DOI' value='10.17487/RFC7136'/>
</reference>



<reference anchor='I-D.hardie-privsec-metadata-insertion'>
<front>
<title>Design considerations for Metadata Insertion</title>

<author initials='T' surname='Hardie' fullname='Ted Hardie'>
    <organization />
</author>

<date month='March' day='20' year='2016' />

<abstract><t>The IAB has published [RFC7624] in response to several revelations of pervasive attack on Internet communications.  In this document we consider the implications of protocol designs which associate metadata with encrypted flows. In particular, we assert that designs which do so by explicit actions of the end system are preferable to  designs in which middleboxes insert them.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-hardie-privsec-metadata-insertion-02' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-hardie-privsec-metadata-insertion-02.txt' />
</reference>



<reference anchor='I-D.thomson-postel-was-wrong'>
<front>
<title>The Harmful Consequences of Postel's Maxim</title>

<author initials='M' surname='Thomson' fullname='Martin Thomson'>
    <organization />
</author>

<date month='March' day='9' year='2015' />

<abstract><t>Jon Postel's famous statement in RFC 1122 of "Be liberal in what you accept, and conservative in what you send" - is a principle that has long guided the design of Internet protocols and implementations of those protocols.  The posture this statement advocates might promote interoperability in the short term, but that short term advantage is outweighed by negative consequences that affect the long term maintenance of a protocol and its ecosystem.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-thomson-postel-was-wrong-00' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-thomson-postel-was-wrong-00.txt' />
</reference>


<reference anchor="blind-tcp-attacks" target="http://www.caida.org/~mjl/pubs/blind.pdf">
  <front>
    <title>Resilience of Deployed TCP to Blind Attacks</title>
    <author initials="M." surname="Luckie" fullname="Matthew Luckie">
      <organization></organization>
    </author>
    <author initials="R." surname="Beverly" fullname="Robert Beverly">
      <organization></organization>
    </author>
    <author initials="T." surname="Wu" fullname="Tiange Wu">
      <organization></organization>
    </author>
    <author initials="M." surname="Allman" fullname="Mark Allman">
      <organization></organization>
    </author>
    <author initials="K." surname="Claffy" fullname="kc claffy">
      <organization></organization>
    </author>
    <date year="2015"/>
  </front>
</reference>
<reference anchor="hiccups" target="http://rbeverly.net/research/papers/hiccups-sigcomm14.pdf">
  <front>
    <title>A Middlebox-Cooperative TCP for a non End-to-End Internet</title>
    <author initials="R." surname="Craven" fullname="Ryan Craven">
      <organization></organization>
    </author>
    <author initials="R." surname="Beverly" fullname="Robert Beverly">
      <organization></organization>
    </author>
    <author initials="M." surname="Allman" fullname="Mark Allman">
      <organization></organization>
    </author>
    <date year="2014"/>
  </front>
</reference>


    </references>



  </back>
</rfc>

